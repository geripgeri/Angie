- alias: 'Telegram bot start command'
  hide_entity: true
  trigger:
    platform: event
    event_type: telegram_command
    event_data:
      command: '/start'
  action:
    - service: telegram_bot.send_message
      data_template:
        target: '{{ trigger.event.data.user_id }}'
        message: 'commands'
        keyboard:
          - '/ping, /status, /arm'
          - '/kitty, /kitty-gif, /doggo'

- alias: 'Telegram bot replies pong to ping'
  hide_entity: true
  trigger:
    platform: event
    event_type: telegram_command
    event_data:
      command: '/ping'
  action:
    - service: notify.Telegram_Notifier_To_User_1
      data_template:
        message: 'Pong'

- alias: 'Telegram bot replies pong to ping in a group chat'
  hide_entity: true
  trigger:
    platform: event
    event_type: telegram_command
    event_data:
      command: !secret telegram_bot_group_ping_cmd
  action:
    - service: notify.Telegram_Notifier_To_Group
      data_template:
        message: 'Pong'

- alias: 'Telegram sends random kitty'
  hide_entity: true
  trigger:
    platform: event
    event_type: telegram_command
    event_data:
      command: '/kitty'
  action:
  - service: notify.Telegram_Notifier_To_User_2
    data:
      message: Hey...
      data:
        photo:
          - url: https://thecatapi.com/api/images/get?type=jpg
            caption: Hey... here is a random Kitty for U ❤️
            
  - service: notify.Telegram_Notifier_To_User_1
    data:
      message: "Random Kitty sent \U0001F609"
        
- alias: 'Telegram sends random kitty gif'
  hide_entity: true
  trigger:
    platform: event
    event_type: telegram_command
    event_data:
      command: '/kitty-gif'
  action:
  - service: notify.Telegram_Notifier_To_User_2
    data:
      message: Hey...
      data:
        video:
          - url: https://thecatapi.com/api/images/get?type=gif
            caption: Hey... here is a random Kitty for U ❤️

  - service: notify.Telegram_Notifier_To_User_1
    data:
      message: "Random Kitty sent \U0001F609"

- alias: 'Telegram sends random doggo'
  hide_entity: true
  trigger:
    platform: event
    event_type: telegram_command
    event_data:
      command: '/doggo'
  action:
  - service: shell_command.get_dog_api_image
  - service: notify.Telegram_Notifier_To_User_2
    data:
      message: Hey...
      data:
        photo:
          - url: https://{{states.sensor.dog_api_image.state}}
            caption: Hey... here is a random Doggo for U ❤️
            
  - service: notify.Telegram_Notifier_To_User_1
    data:
      message: "Random Doggo sent \U0001F609"
      
- alias: 'Telegram bot notifies when golden hour approaches'
  hide_entity: true
  trigger:
    platform: sun
    event: sunset
    offset: "-01:30:00"
  condition:
    condition: numeric_state
    entity_id: sensor.yr_symbol
    above: 0
    below: 4
  action:
  - service: notify.Telegram_Notifier_To_User_2
    data_template:
      message: Hey...
      data:
        photo:
        - url: "{{ states.sensor.reddit_sunset_image.state }}"
          caption: "The golden hour approaches!\nTake some *badass* pictures \U0001F60E \U0001F4F7 \nToday the Sun will set at: {{ as_timestamp(states.sun.sun.attributes.next_setting) | timestamp_custom('%H:%M:%S') }}"

  - service: notify.Telegram_Notifier_To_User_1
    data:
      message: "Golden hour notification sent \U0001F609"

- alias: 'Telegram bot replies the alarm status'
  hide_entity: true
  trigger:
    platform: event
    event_type: telegram_command
    event_data:
      command: /status
  action:
    - service: telegram_bot.send_message
      data_template:
        target: '{{ trigger.event.data.user_id }}'
        message: 'Alarm status: *{{ states.alarm_control_panel.ha_alarm.state }}*'

- alias: 'Telegram bot arms the alarm'
  hide_entity: true
  trigger:
    platform: event
    event_type: telegram_command
    event_data:
      command: /arm
  action:
    - service: alarm_control_panel.alarm_arm_away
      entity_id: alarm_control_panel.ha_alarm
      data:
        code: !secret alarm_code
    - service: telegram_bot.send_message
      data_template:
        target: '{{ trigger.event.data.user_id }}'
        message: 'Alarm armed, Alarm status: *{{ states.alarm_control_panel.ha_alarm.state }}*'


- alias: 'Telegram bot sends alert when a door opened.'
  hide_entity: true
  trigger:
  - entity_id: binary_sensor.entrance_door
    platform: state
    to: 'on'
  action:
    - service: notify.Telegram_Notifier_To_Group
      data_template:
        message: 'The Entrance Door has been opened.'

- alias: 'Telegram bot sends alert when HaveIBeenPwned Sensor state changed for User1.'
  hide_entity: true
  initial_state: false
  trigger:
  - platform: state
    entity_id: !secret haveibeenpwned_entities_user1_separeted_by_comma
  action:
    - service: notify.Telegram_Notifier_To_User_1
      data_template:
        message: "HaveIBeenPwned alarm \U000026A0\U00002620: `{{ trigger.to_state.attributes.friendly_name }}` : `{{ trigger.to_state.attributes['breach '+trigger.to_state.state] }}`"

- alias: 'Telegram bot sends alert when HaveIBeenPwned Sensor state changed for User2.'
  hide_entity: true
  initial_state: false
  trigger:
  - platform: state
    entity_id: !secret haveibeenpwned_entities_user2_separeted_by_comma
  action:
    - service: notify.Telegram_Notifier_To_User_2
      data_template:
        message: "HaveIBeenPwned alarm \U000026A0\U00002620: `{{ trigger.to_state.attributes.friendly_name }}` : `{{ trigger.to_state.attributes['breach '+trigger.to_state.state] }}`"
      
- alias: 'Delay HaveIBeenPwned Telegram automations'
  hide_entity: True
  trigger:
    platform: homeassistant
    event: start
  action:
    - delay:
        seconds: 60
    - service: automation.turn_on
      entity_id: automation.telegram_bot_sends_alert_when_haveibeenpwned_sensor_state_changed_for_user1
    - service: automation.turn_on
      entity_id: automation.telegram_bot_sends_alert_when_haveibeenpwned_sensor_state_changed_for_user2

- alias: 'Telegram bot sends alert when the Heater is on and the Door is open.'
  hide_entity: true
  trigger:
  - platform: state
    entity_id: binary_sensor.living_room_door
    to: 'on'
    for:
      hours: 0
      minutes: 10
      seconds: 0
  condition:
    condition: state
    entity_id: switch.living_room_heater
    state: 'on'
  action:
    - service: notify.Telegram_Notifier_To_Group
      data_template:
        message: "The heater is on, please close the door."

- alias: 'Telegram bot sends alert when Peidl.net HTTP response code Sensor state changed.'
  hide_entity: true
  trigger:
  - platform: numeric_state
    entity_id: sensor.peidlnet_status
    above: 200
  action:
    - service: notify.Telegram_Notifier_To_User_1
      data_template:
        message: "https://peidl.net HTTP response code changed!\nStatus code: *{{ states.sensor.peidlnet_status.state }}*"

- alias: 'Telegram bot sends alert when external ip changed.'
  hide_entity: true
  trigger:
  - platform: state
    entity_id: sensor.external_ip
  action:
    - service: notify.Telegram_Notifier_To_User_1
      data_template:
        message: "External ip changed to: *{{ states.sensor.external_ip.state }}*"
