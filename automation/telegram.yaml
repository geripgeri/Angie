- alias: 'Telegram bot start command'
  trigger:
    platform: event
    event_type: telegram_command
    event_data:
      command: '/start'
  action:
    - service: notify.Telegram_Notifier_To_User_1
      data:
        message: 'commands'
        data:
          keyboard:
            - '/ping, /status, /kitty'

- alias: 'Telegram bot reply pong to ping'
  hide_entity: true
  trigger:
    platform: event
    event_type: telegram_command
    event_data:
      command: '/ping'
  action:
    - service: notify.Telegram_Notifier_To_User_1
      data_template:
        message: 'Pong'

- alias: 'Telegram bot reply pong to ping in a group chat'
  hide_entity: true
  trigger:
    platform: event
    event_type: telegram_command
    event_data:
      command: !secret telegram_bot_group_ping_cmd
  action:
    - service: notify.Telegram_Notifier_To_Group
      data_template:
        message: 'Pong'

- alias: 'Telegram sends random kitty'
  hide_entity: true
  trigger:
    platform: event
    event_type: telegram_command
    event_data:
      command: '/kitty'
  action:
  - service: notify.Telegram_Notifier_To_User_2
    data:
      message: Hey...
      data:
        photo:
          - url: https://thecatapi.com/api/images/get?type=jpg
            caption: Hey... here is a random Kitty for U ❤️

  - service: notify.Telegram_Notifier_To_User_1
    data:
      message: "Message sent \U0001F609"

- alias: 'Telegram bot notifies when golden hour apaches'
  hide_entity: false
  trigger:
    platform: sun
    event: sunset
    offset: "-01:30:00"
  condition:
    condition: numeric_state
    entity_id: sensor.yr_symbol
    above: 0
    below: 4
  action:
  - service: notify.Telegram_Notifier_To_User_2
    data_template:
      message: Hey...
      data:
        photo:
        - url: "{{ states.sensor.reddit_sunset_image.state }}"
          caption: "The golden hour apaches!\nTake some *badass* pictures \U0001F60E \U0001F4F7 \nToday the will set at: {{ as_timestamp(states.sun.sun.attributes.next_setting) | timestamp_custom('%H:%M:%S') }}"

  - service: notify.Telegram_Notifier_To_User_1
    data:
      message: "Golden hour notification sent \U0001F609"

- alias: 'Telegram bot reply the alarm status'
  hide_entity: true
  trigger:
    platform: event
    event_type: telegram_command
    event_data:
      command: /status
  action:
    - service: telegram_bot.send_message
      data_template:
        target: '{{ trigger.event.data.user_id }}'
        message: "Alarm status: {{ states.alarm_control_panel.ha_alarm.state }}"

- alias: 'Telegram bot sends alert when a door opened.'
  hide_entity: false
  trigger:
  - entity_id: binary_sensor.entrance_door
    platform: state
    to: 'on'
  action:
    - service: notify.Telegram_Notifier_To_Group
      data_template:
        message: 'The Entrance Door has been opened.'

- alias: 'Telegram bot sends alert when alarm triggered.'
  hide_entity: false
  trigger:
  - platform: state
    entity_id: alarm_control_panel.ha_alarm
    to: triggered
  action:
    - service: notify.Telegram_Notifier_To_Group
      data_template:
        message: 'The alarm triggered!'

- alias: 'Telegram bot sends alert when HaveIBeenPwned Sensor state changed.'
  hide_entity: false
  initial_state: false
  trigger:
  - platform: state
    entity_id: !secret haveibeenpwned_entities_separeted_by_comma
  action:
    - service: notify.Telegram_Notifier_To_User_1
      data_template:
        message: "HaveIBeenPwned alarm \U000026A0\U00002620: `{{ trigger.to_state.attributes.friendly_name }}` : `{{ trigger.to_state.attributes['breach '+trigger.to_state.state] }}`"

- alias: 'Delay HaveIBeenPwned Telegram automation'
  hide_entity: True
  trigger:
    platform: homeassistant
    event: start
  action:
    - delay:
        seconds: 20
    - service: automation.turn_on
      entity_id: automation.telegram_bot_sends_alert_when_haveibeenpwned_sensor_state_changed

- alias: 'Telegram bot sends alert when the Heater is on and the Door is open.'
  hide_entity: false
  trigger:
  - platform: state
    entity_id: binary_sensor.living_room_door
    to: 'on'
    for:
      hours: 0
      minutes: 10
      seconds: 0
  condition:
    condition: state
    entity_id: switch.living_room_heater
    state: 'on'
  action:
    - service: notify.Telegram_Notifier_To_Group
      data_template:
        message: "The heater is on, please close the door."
